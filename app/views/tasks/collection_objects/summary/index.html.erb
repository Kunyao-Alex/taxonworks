<h2> Collection summary </h2>

<h3> Objects </h3>
<table>
  <tr><th></th><th>Count</th><th> % total </th> </tr>
  <tr>
    <td> Collection objects </td>
    <td> <%= collection_object_count = sessions_current_project.collection_objects.count -%> </td>
    <td> 100 </td>
  </tr>

  <tr>
    <td> Specimens (collection object with total = 1) </td>
    <td> <%= specimen_object_count = Specimen.where(project_id: sessions_current_project_id).count -%> </td>
    <td> <%= (100.0 * (specimen_object_count.to_f / collection_object_count.to_f)).round(2) -%> </td>
  </tr>

  <tr>
    <td> Lots (collection object with total > 1) </td>
    <td> <%= lot_object_count = Lot.where(project_id: sessions_current_project_id).count -%> </td>
    <td> <%= (100.0 * (lot_object_count.to_f / collection_object_count.to_f)).round(2) -%> </td>
  </tr>

  <tr>
    <td> Ranged lots  (collections enumerated in some range) </td>
    <td> <%= ranged_lot_object_count = RangedLot.where(project_id: sessions_current_project_id).count -%> </td>
    <td> <%= (100.0 * (ranged_lot_object_count.to_f / collection_object_count.to_f)).round(2) -%> </td>
  </tr>

  <tr>
    <td> Total enumerated items</td>
    <td> <%= total_enumerated = CollectionObject.where(project_id: sessions_current_project_id).sum(:total) -%> </td>
  </tr>

  <tr>
    <td> Total enumerated items from lots</td>
    <td> <%= lot_enumerated = Lot.where(project_id: sessions_current_project_id).sum(:total) -%> </td>
    <td> <%= (100.0 * (lot_enumerated.to_f / total_enumerated.to_f)).round(2) -%> </td>
  </tr>

  <tr>
    <td> Collection objects with catalog numbers</td>
    <td> <%= collection_object_with_catalog_number = CollectionObject.joins(:identifiers).where(identifiers: {type: 'Identifier::Local::CatalogNumber'}, project_id:  sessions_current_project_id).count -%> </td>
    <td> <%= (100.0 * (collection_object_with_catalog_number.to_f / collection_object_count.to_f)).round(2) -%> </td>
  </tr>

</table>

<h3> Taxonomic scope </h3>
<table>
  <tr><th></th><th>Count</th><th> % total </th> </tr>
  <tr>
    <td> Taxon concepts (OTUs) in determinations</td>
    <td> <%= total_otus = Otu.joins(:collection_objects).where(project_id: sessions_current_project_id).distinct.count -%> </td>
  </tr>

  <tr>
    <td> Objects determined to family level only </td>
    <td> <%= total_families = Protonym.joins(:collection_objects).where(project_id: sessions_current_project_id).is_family_group.distinct.count -%> </td>
  </tr>

  <tr>
    <td> Objects determined to genus level only </td>
    <td> <%= total_genera = Protonym.joins(:collection_objects).where(project_id: sessions_current_project_id).is_genus_group.distinct.count -%> </td>
  </tr>

  <tr>
    <td> Objects determined to species level </td>
    <td> <%= total_species = Protonym.joins(:collection_objects).where(project_id: sessions_current_project_id).is_species_group.distinct.count -%> </td>
  </tr>

  <tr>
    <td> Genera in collection  </td>
    <td> <%= genera_in_collection = Protonym.joins(:collection_objects).where(project_id: sessions_current_project_id).is_species_group.distinct.count -%> </td>
  </tr>

  <tr>
    <td> Family inferred </td>
    <td> <%= family_inferred = Protonym.names_at_rank_group_for_collection_objects('family').count -%> </td>
  </tr>

  <tr>
    <td> Genera inferred </td>
    <td> <%= genera_inferred = Protonym.names_at_rank_group_for_collection_objects('genusgroup').count -%> </td>
  </tr>

  <tr>
    <td> Species inferred </td>
    <td> <%= species_inferred = Protonym.names_at_rank_group_for_collection_objects.count -%> </td>
  </tr>
</table>

<h3> Loans </h3>
<table>
  <tr><th></th><th>Count</th><th> % total </th> </tr>

  <tr>
    <td> Collection objects loaned* </td>
    <td> <%= objects_loaned =  CollectionObject.joins(:loan_items).where( project_id: sessions_current_project_id).distinct.count -%> </td>
    <td> <%= (100.0 * (objects_loaned.to_f / collection_object_count.to_f)).round(2) -%> </td>
  </tr>

  <tr>
    <td> Collection objects currently on loan </td>
    <td> <%= objects_loaned =  CollectionObject.joins(:loan_items).where( project_id: sessions_current_project_id, loan_items: { date_returned: nil }).distinct.count -%> </td>
    <td> <%= (100.0 * (objects_loaned.to_f / collection_object_count.to_f)).round(2) -%> </td>
  </tr>

  <tr>
    <td> Loans </td>
    <td> <%= loans = sessions_current_project.loans.count -%> </td>
    <td> 100 </td>
  </tr>

  <tr>
    <td> Open loans </td>
    <td> <%= open_loans = sessions_current_project.loans.where(loans: {date_closed: nil}).count -%> </td>
    <td> <%= (100.0 * (open_loans.to_f / loans.to_f)).round(2) -%> </td>
  </tr>
</table>


<h3> Determinations </h3>
<table>
  <tr><th></th><th>Count</th><th> % total </th> </tr>
  <tr>
    <td> Collection objects with determinations </td>
    <td> <%= objects_with_determinations = CollectionObject.joins(:taxon_determinations).where(project_id: sessions_current_project_id).distinct.count -%> </td>
    <td> <%= (100.0 * (objects_with_determinations.to_f / collection_object_count.to_f)).round(2) -%> </td>
  </tr>
</table>


<h3> Staged images </h3>
<table>
  <tr><th></th><th>Count</th><th> % total </th> </tr>

  <tr>
    <td> Staged images </td>
    <td> <%= staged_images = SqedDepiction.where(project_id: sessions_current_project_id).count -%> </td>
  </tr>

  <tr>
    <td> Parsed staged images with verbatim collecting event </td>
    <td> <%= staged_with_ce= SqedDepiction.joins(:collection_object).where(project_id: sessions_current_project_id).where.not(collection_objects: {buffered_collecting_event: nil}).count -%> </td>
    <td> <%= (100.0 * (staged_with_ce.to_f / staged_images.to_f)).round(2) -%> </td>
  </tr>

  <tr>
    <td> Parsed staged images with verbatim determination </td>
    <td> <%= staged_with_verbatim_determination = SqedDepiction.joins(:collection_object).where(project_id: sessions_current_project_id).where.not(collection_objects: {buffered_determinations: nil}).count -%> </td>
    <td> <%= (100.0 * (staged_with_verbatim_determination.to_f / staged_images.to_f)).round(2) -%> </td>
  </tr>

  <tr>
    <td> Parsed staged images with verbatim other labels </td>
    <td> <%= staged_with_verbatim_other = SqedDepiction.joins(:collection_object).where(project_id: sessions_current_project_id).where.not(collection_objects: {buffered_other_labels: nil}).count -%> </td>
    <td> <%= (100.0 * (staged_with_verbatim_other.to_f / staged_images.to_f)).round(2) -%> </td>

    <tr>
      <td> Parsed staged images with collecting event </td>
      <td> <%= staged_with_collecting_event = SqedDepiction.joins(collection_object: [:collecting_event]).where(project_id: sessions_current_project_id).where.not(collecting_events: {id: nil}).count -%> </td>
      <td> <%= (100.0 * (staged_with_collecting_event.to_f / staged_images.to_f)).round(2) -%> </td>
    </tr>

    <tr>
      <td> Parsed staged images with taxon determinations </td>
      <td> <%= staged_with_determinations = SqedDepiction.joins(collection_object: [:taxon_determinations]).where(project_id: sessions_current_project_id).where.not(taxon_determinations: {id: nil}).count -%> </td>
      <td> <%= (100.0 * (staged_with_determinations.to_f / staged_images.to_f)).round(2) -%> </td>
    </tr>

    <tr>
      <td> Parsed staged images with catalog numbers </td>
      <td> <%= staged_with_catalog_numbers = SqedDepiction.joins(collection_object: [:identifiers]).where(project_id: sessions_current_project_id).where(identifiers: {type: 'Identifier::Local::CatalogNumber'}).where.not(identifiers: {id: nil}).count -%> </td>
      <td> <%= (100.0 * (staged_with_catalog_numbers.to_f / staged_images.to_f)).round(2) -%> </td>
    </tr>

</table>


<h3> Other images </h3>
<table>
  <tr><th></th><th>Count</th><th> % total </th> </tr>
  <tr>
    <td> Non-stage images on collection objects </td>
    <td> <%= image_on_collection_objects = Image.includes(depictions: [:sqed_depiction]).where( sqed_depictions: {id: nil}, depictions: {depiction_object_type: 'CollectionObject'}, project_id: sessions_current_project_id).count -%> </td>
  </tr>

  <tr>
    <td> Images on collecting events </td>
    <td> <%= image_on_collecting_events = Image.includes(:depictions).where(depictions: {depiction_object_type: 'CollectingEvent'}, project_id: sessions_current_project_id).count -%> </td>
  </tr>

</table>


<h3> Type material </h3>
<table>
  <tr><th></th><th>Count</th><th> % total </th> </tr>
  <tr>
    <td> Type collection objects </td>
    <td> <%= type_collection_objects = CollectionObject::BiologicalCollectionObject.joins(:type_materials).where(project_id: sessions_current_project_id).count -%> </td>
    <td> 100 </td>
  </tr>

  <% TypeMaterial.where(project_id: sessions_current_project_id).select(:type_type).distinct.pluck(:type_type).sort.each do |t| -%>
    <tr>
      <td><%= t -%></td>
      <td> <%= tot = CollectionObject::BiologicalCollectionObject.joins(:type_materials).where(type_materials: {type_type: t}, project_id: sessions_current_project_id).count -%> </td>
      <td> <%= (100.0 * (tot.to_f / type_collection_objects.to_f)).round(2) -%> </td>
    </tr>
  <% end %>
</table>

<h3> Preparation </h3>
<table>
  <tr><th></th><th>Count</th><th> % total </th> </tr>
  <% PreparationType.joins(:collection_objects).where(collection_objects: { project_id: sessions_current_project_id}).order(:name).distinct.each do |t| -%> 
    <tr>
      <td> <%= object_tag(t) -%> collection objects </td>
      <td> <%= tot = CollectionObject.where(preparation_type: t).count -%> </td>
      <td> <%= (100.0 * (tot.to_f / collection_object_count.to_f)).round(4) -%> </td>
    </tr>
  <% end %>
</table>

<h3> Collecting events </h3>
<table>
  <tr><th></th><th>Count</th><th> % total </th> </tr>

  <tr>
    <td> Collecting events </td>
    <td> <%= collecting_event_total = CollectingEvent.where(project_id: sessions_current_project_id).count -%> </td>
    <td> <%= 100 -%> </td>
  </tr>

  <tr>
    <td> Collecting events without collection objects</td>
    <td> <%= collecting_event_without_objects = CollectingEvent.includes(:collection_objects).where(project_id: sessions_current_project_id, collection_objects: { id: nil }).count -%> </td>
    <td> <%= (100.0 * (collecting_event_without_objects.to_f / collecting_event_total.to_f)).round(2) -%> </td>
  </tr>

  <tr>
    <td> Collection objects without collecting events </td>
    <td> <%= objects_without_collecting_events = CollectionObject.where(project_id: sessions_current_project_id, collecting_event_id: nil).count -%> </td>
    <td> <%= (100.0 * (objects_without_collecting_events.to_f / collection_object_count.to_f)).round(2) -%> </td>
  </tr>

  <tr>
    <td> Collection objects with Georeferences</td>
    <td> <%= collection_objects_with_georeferences = CollectionObject.joins(:georeferences).where(project_id: sessions_current_project_id).distinct.count -%> </td>
    <td> <%= (100.0 * (collection_objects_with_georeferences.to_f / collection_object_count.to_f)).round(2) -%> </td>
  </tr>

</table>
